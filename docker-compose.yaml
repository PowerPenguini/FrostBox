services:
  go-migrate:
    build:
      context: ./migrator
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal_net
    restart: on-failure

  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    networks:
      - internal_net
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./backend/main
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
      go-migrate:
        condition: service_started

  uta-processor:
    build:
      context: ./backend/uta-processor
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
      go-migrate:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    networks:
      - internal_net

  nginx:
    build: ./nginx
    depends_on:
      - backend
      - frontend
      - uta-processor
    ports:
      - "80:80"
    networks:
      - external_net
      - internal_net
    restart: always

  notification-svc:
    build:
      context: ./notification-svc
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      go-migrate:
        condition: service_started
    networks:
      - internal_net

volumes:
  postgres_storage:


networks:
  internal_net:
    internal: true
  external_net:
    internal: false
